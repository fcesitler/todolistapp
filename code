import React, { useState, useEffect } from 'react';
import { LineChart, XAxis, YAxis, Line, CartesianGrid, Tooltip, Legend } from "recharts";

interface Task {
  id: number;
  title: string;
  completed: boolean;
  category: string;
}

interface Category {
  name: string;
  color: string;
}

const categories: Category[] = [
  { name: 'Work', color: 'blue' },
  { name: 'Personal', color: 'green' },
  { name: 'Shopping', color: 'red' },
];

const initialTasks: Task[] = [
  { id: 1, title: 'Buy milk', completed: false, category: 'Shopping' },
  { id: 2, title: 'Walk the dog', completed: false, category: 'Personal' },
  { id: 3, title: 'Do laundry', completed: false, category: 'Personal' },
];

const ToDoListApp = () => {
  const [tasks, setTasks] = useState(initialTasks);
  const [newTask, setNewTask] = useState('');
  const [selectedCategory, setSelectedCategory] = useState(categories[0]);
  const [theme, setTheme] = useState('light');
  const [soundEffects, setSoundEffects] = useState(true);

  useEffect(() => {
    const storedTasks = localStorage.getItem('tasks');
    if (storedTasks) {
      setTasks(JSON.parse(storedTasks));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('tasks', JSON.stringify(tasks));
  }, [tasks]);

  const addTask = () => {
    if (newTask.trim() !== '') {
      const newTaskObject: Task = {
        id: tasks.length + 1,
        title: newTask,
        completed: false,
        category: selectedCategory.name,
      };
      setTasks([...tasks, newTaskObject]);
      setNewTask('');
    }
  };

  const deleteTask = (id: number) => {
    setTasks(tasks.filter((task) => task.id !== id));
  };

  const toggleTask = (id: number) => {
    setTasks(
      tasks.map((task) =>
        task.id === id ? { ...task, completed: !task.completed } : task
      )
    );
  };

  const handleThemeChange = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

  const handleSoundEffectsChange = () => {
    setSoundEffects(!soundEffects);
  };

  return (
    <div className={`h-screen ${theme === 'light' ? 'bg-gray-100' : 'bg-gray-900'}`}>
      <div className="container mx-auto p-4 pt-6">
        <h1 className={`text-3xl ${theme === 'light' ? 'text-gray-900' : 'text-gray-100'} font-bold mb-4`}>
          To-Do List App
        </h1>
        <div className="flex justify-between mb-4">
          <select
            value={selectedCategory.name}
            onChange={(e) =>
              setSelectedCategory(
                categories.find((category) => category.name === e.target.value)!
              )
            }
            className={`px-4 py-2 ${theme === 'light' ? 'bg-gray-100' : 'bg-gray-900'} ${theme === 'light' ? 'text-gray-900' : 'text-gray-100'} border border-gray-300 rounded-lg focus:outline-none focus:ring focus:border-blue-500`}
          >
            {categories.map((category) => (
              <option key={category.name} value={category.name}>
                {category.name}
              </option>
            ))}
          </select>
          <button
            onClick={handleThemeChange}
            className={`px-4 py-2 ${theme === 'light' ? 'bg-gray-100' : 'bg-gray-900'} ${theme === 'light' ? 'text-gray-900' : 'text-gray-100'} border border-gray-300 rounded-lg focus:outline-none focus:ring focus:border-blue-500`}
          >
            {theme === 'light' ? 'Switch to Dark' : 'Switch to Light'}
          </button>
          <button
            onClick={handleSoundEffectsChange}
            className={`px-4 py-2 ${theme === 'light' ? 'bg-gray-100' : 'bg-gray-900'} ${theme === 'light' ? 'text-gray-900' : 'text-gray-100'} border border-gray-300 rounded-lg focus:outline-none focus:ring focus:border-blue-500`}
          >
            {soundEffects ? 'Sound Effects On' : 'Sound Effects Off'}
          </button>
        </div>
        <input
          type="text"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
          placeholder="Add new task"
          className={`px-4 py-2 ${theme === 'light' ? 'bg-gray-100' : 'bg-gray-900'} ${theme === 'light' ? 'text-gray-900' : 'text-gray-100'} border border-gray-300 rounded-lg focus:outline-none focus:ring focus:border-blue-500 w-full`}
        />
        <button
          onClick={addTask}
          className={`px-4 py-2 ${theme === 'light' ? 'bg-gray-100' : 'bg-gray-900'} ${theme === 'light' ? 'text-gray-900' : 'text-gray-100'} border border-gray-300 rounded-lg focus:outline-none focus:ring focus:border-blue-500`}
        >
          Add Task
        </button>
        <ul className="list-none p-0 m-0">
          {tasks.map((task) => (
            <li
              key={task.id}
              className={`flex justify-between items-center py-2 ${theme === 'light' ? 'bg-gray-100' : 'bg-gray-900'} ${theme === 'light' ? 'text-gray-900' : 'text-gray-100'} border-b border-gray-300`}
            >
              <span
                className={`${
                  task.completed
                    ? 'line-through text-gray-500'
                    : 'text-gray-900'
                }`}
              >
                {task.title}
              </span>
              <div className="flex justify-end items-center">
                <button
                  onClick={() => toggleTask(task.id)}
                  className={`px-2 py-1 ${theme === 'light' ? 'bg-gray-100' : 'bg-gray-900'} ${theme === 'light' ? 'text-gray-900' : 'text-gray-100'} border border-gray-300 rounded-lg focus:outline-none focus:ring focus:border-blue-500`}
                >
                  {task.completed ? 'Undo' : 'Done'}
                </button>
                <button
                  onClick={() => deleteTask(task.id)}
                  className={`px-2 py-1 ${theme === 'light' ? 'bg-gray-100' : 'bg-gray-900'} ${theme === 'light' ? 'text-gray-900' : 'text-gray-100'} border border-gray-300 rounded-lg focus:outline-none focus:ring focus:border-blue-500`}
                >
                  Delete
                </button>
              </div>
            </li>
          ))}
        </ul>
        <div className="flex justify-center mt-4">
          <LineChart
            width={400}
            height={200}
            data={tasks.map((task) => ({
              name: task.title,
              completed: task.completed ? 1 : 0,
            }))}
          >
            <XAxis dataKey="name" />
            <YAxis />
            <CartesianGrid strokeDasharray="3 3" />
            <Tooltip />
            <Legend />
            <Line type="monotone" dataKey="completed" stroke="#8884d8" />
          </LineChart>
        </div>
      </div>
    </div>
  );
};

export default ToDoListApp;
